# Manipulation
library(dplyr)
library(tidyverse)
library(caTools)
library(lubridate)
# Visualization
library(ggplot2)
library(plotly)
library(ggthemes)
library(corrplot)
library(ggcorrplot)
library(ggstatsplot)
library(ggpubr)
# EDA REPORT
library(dlookr)
library(visdat)
library(DataExplorer)
library(SmartEDA)
library(flextable)
library(ISLR)
# Machine Learning
library(missRanger)
library(rpart)
library(randomForest)
library(Amelia)
library(psych)
library(caret)
library(Hmisc)
# Importer les donnée qui ont dans le fichier Omrane.csv qui est dans la même répertoire
data <- read.csv(file = "./Omrane.csv", header = TRUE, sep="\t", dec=",")
# deleting the columns that we don't need in our analysis
data = select(data, c(-"N..Lot",-"TitreFoncier",-"CIN.RC",-"DateDeCréation"))
colnames(data)[16] <- "DésignationTypeDeDocument"
# generer une liste des indexes aléatoires
shuffle_index <- sample(1:nrow(data))
# On va utiliser ses indexes pour mélanger les donnée
data <- data[shuffle_index, ]
glimpse(data)
#fixing the column type
cols.num <- c("NombreUnité","StatutADV", "Superficie", "PrixUnitaire", "PrixTotal", "Vers1", "Vers2", "Vers3", "TotalVersement",
"VersRegularis","TropPerçuRéglé", "TropPerçuNonRéglé", "ResteàPayer", "TotalAvances")
cols.char = c("NuméroClient")
cols.date = c("DateLivraison","DateContrat","DateDeCréation")
data[cols.num] <- sapply(data[cols.num],as.numeric)
data[cols.char] <- sapply(data[cols.char],as.character)
data$Création <- ymd(data$Création)
data$DateContrat <- ymd(data$DateContrat)
data$DateLivraison <- ymd(data$DateLivraison)
sapply(data, class)
# Les valeurs non-observés pour chaque attribut
data %>% plot_missing()
# since the two columns DateContrat and DateLivraison are 100% missing and the company can't provide a new dataset that fix the problem of the missing Feautures unless they are very important and less than 50% in the case we could use them in Analysis in our case the mentioned variables should be dropped
plot_na_pareto(data, only_na = TRUE)
ggplotly(plot_na_pareto(data,  only_na = TRUE))
# the problem with pareto chart is that we don't know whether the missing values in different columns belong to the same row of observations
# so visualize the missing values across columns
plot_na_intersect(data)
#vis_miss(data) %>% ggplotly()
#to reduce bias we remove the two variables
data = select(data, c(-"DateLivraison",-"DateContrat"))
# to impute the numeric continueous missing values & outliers we're going to use machine learning algorithms :
# rpart - Recursive Partitioning and Regression Trees.
# mice - Multivariate Imputation by Chained Equations
# mean
# dlookr imputation
#set.seed(123)
#data_na <- generateNA(data) %>% mutate(Designation = factor(Designation))
#plot_na_intersect(data_na, only_na = TRUE)
#
#imputate_na(data_na, Création, StatutADV, method = "mean") %>%
#  plot()
#imputate_na(data_na, Création, StatutADV, method = "rpart") %>% plot()
#imputate_na(data_na, Création, StatutADV, method = "mice", seed = 111) %>% plot()
#
#Miss Ranger Imputation
#data_imputed <- missRanger(data_na, formula = . ~ ., num.trees = 1000, seed = 3)
dummy.data.frame(data)
install.packages("dummies")
library(dummies)
data.segmentation = dummy.data.frame(data)
View(data.segmentation)
write.csv(data.segmentation)
View(data)
View(data)
distances = dist(data[17:26], method ="euclidean")
